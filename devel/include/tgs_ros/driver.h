// Generated by gencpp from file tgs_ros/driver.msg
// DO NOT EDIT!


#ifndef TGS_ROS_MESSAGE_DRIVER_H
#define TGS_ROS_MESSAGE_DRIVER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tgs_ros
{
template <class ContainerAllocator>
struct driver_
{
  typedef driver_<ContainerAllocator> Type;

  driver_()
    : driver_id()
    , name()
    , car_brand()
    , car_type()
    , plate()  {
    }
  driver_(const ContainerAllocator& _alloc)
    : driver_id(_alloc)
    , name(_alloc)
    , car_brand(_alloc)
    , car_type(_alloc)
    , plate(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _driver_id_type;
  _driver_id_type driver_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _car_brand_type;
  _car_brand_type car_brand;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _car_type_type;
  _car_type_type car_type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _plate_type;
  _plate_type plate;





  typedef boost::shared_ptr< ::tgs_ros::driver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tgs_ros::driver_<ContainerAllocator> const> ConstPtr;

}; // struct driver_

typedef ::tgs_ros::driver_<std::allocator<void> > driver;

typedef boost::shared_ptr< ::tgs_ros::driver > driverPtr;
typedef boost::shared_ptr< ::tgs_ros::driver const> driverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tgs_ros::driver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tgs_ros::driver_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tgs_ros::driver_<ContainerAllocator1> & lhs, const ::tgs_ros::driver_<ContainerAllocator2> & rhs)
{
  return lhs.driver_id == rhs.driver_id &&
    lhs.name == rhs.name &&
    lhs.car_brand == rhs.car_brand &&
    lhs.car_type == rhs.car_type &&
    lhs.plate == rhs.plate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tgs_ros::driver_<ContainerAllocator1> & lhs, const ::tgs_ros::driver_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tgs_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tgs_ros::driver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tgs_ros::driver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgs_ros::driver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tgs_ros::driver_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgs_ros::driver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tgs_ros::driver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tgs_ros::driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93069d58263ad2c724a8a005539b60fe";
  }

  static const char* value(const ::tgs_ros::driver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93069d58263ad2c7ULL;
  static const uint64_t static_value2 = 0x24a8a005539b60feULL;
};

template<class ContainerAllocator>
struct DataType< ::tgs_ros::driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tgs_ros/driver";
  }

  static const char* value(const ::tgs_ros::driver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tgs_ros::driver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string driver_id\n"
"string name\n"
"string car_brand\n"
"string car_type\n"
"string plate\n"
;
  }

  static const char* value(const ::tgs_ros::driver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tgs_ros::driver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driver_id);
      stream.next(m.name);
      stream.next(m.car_brand);
      stream.next(m.car_type);
      stream.next(m.plate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct driver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tgs_ros::driver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tgs_ros::driver_<ContainerAllocator>& v)
  {
    s << indent << "driver_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.driver_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "car_brand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.car_brand);
    s << indent << "car_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.car_type);
    s << indent << "plate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.plate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TGS_ROS_MESSAGE_DRIVER_H
